@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using SMoSApp_Win.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm email</PageTitle>

<h1>Confirm email</h1>
<StatusMessage Message="@statusMessage" />

@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
            return;
        }

        // Enhanced retry mechanism with longer delays and more attempts
        ApplicationUser? user = null;
        for (var i = 0; i < 5; i++) // Increased retries
        {
            user = await UserManager.FindByIdAsync(UserId);
            if (user is not null)
            {
                break;
            }
            await Task.Delay(1000); // Wait a full second between retries
        }

        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error loading user with ID {UserId}. Please try again or contact support.";
            return;
        }

        var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
        var result = await UserManager.ConfirmEmailAsync(user, code);

        if (result.Succeeded)
        {
            // Ensure the user is signed in after email confirmation
            await SignInManager.SignInAsync(user, isPersistent: false);

            statusMessage = "Thank you for confirming your email. Redirecting to profile setup...";
            await Task.Delay(2000); // Give time to read the message
            RedirectManager.RedirectTo("Account/SetProfile");
        }
        else
        {
            statusMessage = "Error confirming your email.";
            await Task.Delay(2000);
            RedirectManager.RedirectTo("Account/Login");
        }
    }
}
