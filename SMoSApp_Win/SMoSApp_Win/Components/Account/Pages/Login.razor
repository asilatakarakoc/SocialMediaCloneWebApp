@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SMoSApp_Win.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Twitter</PageTitle>



<div class="login-page-container">
    <section class="login-card">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <h1 id="login-style">Welcome back.</h1>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="login-input" autocomplete="username" aria-required="true" placeholder="Your mail." />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="login-input" autocomplete="current-password" aria-required="true" placeholder="Your password." />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            
            <div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">log in</button>
            </div>

            <div>
                <a href="Account/Register" class="w-100 btn btn-lg btn-primary signup-button">sign up</a>
            </div>
            <div>
                <p>
                    <a href="Account/ForgotPassword">Forgot your password?</a>
                </p>
                
                
                
                <p>
                    <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                </p>
            </div>
        </EditForm>
    </section>
</div>
<!-- this is for signing up with Google (gmail)
<div class="col-md-6 col-md-offset-2">
    <section>
        <h3>Use another service to log in.</h3>
        <hr />
        <ExternalLoginPicker />
    </section>
</div>
-->


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private void NavigateToSignup()
    {
        NavigationManager.NavigateTo("Account/Register");
    }
    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password,false, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; } = false;
    }
}
